const tileSheet = {
    image: null,

    columns: 13,
    tileHeight: 16,
    tileWidth: 16
}

const world = {
    map: [7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 5, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,
        7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 7,




    ],

    columns: 50,
    height: 200,
    width: 200,
}
let map;
let player;
let sprites = [];
let enemy;
let enemyArr = [];
let enemys;
let bullet;
let bullets;
let bulletArr = [];
let bulletHit = false;
var firedInLastDraw = false;
let angle; 
function preload() {
    tileSheet.image = loadImage('assets/images/desert.png');
}

function setup() {
    createCanvas(800, 600);
    map = new Map(tileSheet, world);
    player = createSprite(400, 300, 20, 20);
    enemys = new Group()
    for (let i = 0; i < 5; i++) {
        enemy = new Enemy()
        enemyArr.push(enemy);
        enemys.add(enemy.enemySprite);
    }
    bullets = new Group();




}

function draw() {
    background(0);
    map.render();

    for (let i = 0; i < enemyArr.length; i++) {
        enemyArr[i].move();
        enemyArr[i].edges();

        if (bulletHit) {
            enemyArr.splice(i, 1);
            enemys.remove(enemy.enemySprite)
        }
    }


    for (let i = bulletArr.length - 1; i >= 0; i--) {

        bulletArr[i].update();
        if (bulletArr[i].offscreen()) {
            bulletArr.splice(i, 1);
            bullets.remove(bullet.bulletSprite);

        }

    }
    controls();
    player.displace(enemys)
   

    bullets.overlap(enemys, bulletHitEnemy);

    drawSprites();

}

function bulletHitEnemy(bulletSprite, enemySprite) {
    enemySprite.remove();
    enemys.remove(enemySprite);
    bulletSprite.remove();
    bullets.remove(bulletSprite);
    findAndRemoveObjectFromArray(enemySprite, enemyArr, 'enemySprite');
    findAndRemoveObjectFromArray(bulletSprite, bulletArr, 'bulletSprite');
}

function findAndRemoveObjectFromArray(obj, array, spriteFieldName) {
    for (let i = array.length - 1; i >= 0; i--) {
        if (array[i][spriteFieldName] == obj) {
            array.splice(i, 1);
            break;
        }
    }
}

function controls() {
    if (keyIsDown(80)) {
        
        if (!firedInLastDraw) {
            bullet = new Bullet(player.position)
            bulletArr.push(bullet);

            bullets.add(bullet.bulletSprite);



            firedInLastDraw = true;
        }
    } else {
        firedInLastDraw = false;

        if (keyIsDown(87) || keyIsDown(UP_ARROW)) {
            angle = Math.PI / -2
            player.position.y += -2;
        } else if (keyIsDown(65) || keyIsDown(LEFT_ARROW)) {
            angle = Math.PI
            player.position.x += -2;
        } else if (keyIsDown(83) || keyIsDown(DOWN_ARROW)) {
            angle = Math.PI / 2
            player.position.y += +2;
        } else if (keyIsDown(68) || keyIsDown(RIGHT_ARROW)) {
            angle = Math.PI * 2
            player.position.x += +2;
        }
    }

}




